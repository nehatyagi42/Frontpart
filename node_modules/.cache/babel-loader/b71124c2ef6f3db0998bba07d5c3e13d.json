{"ast":null,"code":"import * as types from './types';\n\nconst isSuccess = payload => {\n  return {\n    type: types.ON_RESULT,\n    payload\n  };\n};\n\nconst onInit = () => {\n  return {\n    type: types.ON_INIT\n  };\n};\n\nexport const initilize = () => {\n  return onInit();\n};\nexport const postFlight = (url, payload, title) => {\n  return postData(url, payload, title, isSuccess);\n};\n\nconst postData = (url, payload, title, done) => {\n  return async dispatch => {\n    try {\n      const response = await fetch(url, {\n        method: 'POST',\n        body: JSON.stringify(payload),\n        credentials: 'same-origin',\n        headers: new Headers({\n          'Content-Type': 'application/json'\n        })\n      });\n\n      if (!response.ok) {\n        throw Error(response.statusText);\n      }\n\n      const data = await response.json();\n\n      if (data) {\n        delete data._id;\n        delete data.__v;\n        console.log(\"Result: \" + JSON.stringify(data));\n        let result = Object.keys(data).map(key => {\n          if (!key._id || !key.__v) {\n            return data[key];\n          }\n\n          return true;\n        }).join(\"-\");\n        dispatch(done({\n          result: result,\n          title: title\n        }));\n      }\n    } catch (e) {\n      console.log(\"Error: \" + e.statusText);\n    }\n  };\n};","map":{"version":3,"sources":["/home/neha/dev_neha/node_workspace/flights-mgt/Frontpart/src/actions/index.js"],"names":["types","isSuccess","payload","type","ON_RESULT","onInit","ON_INIT","initilize","postFlight","url","title","postData","done","dispatch","response","fetch","method","body","JSON","stringify","credentials","headers","Headers","ok","Error","statusText","data","json","_id","__v","console","log","result","Object","keys","map","key","join","e"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,SAAvB;;AAEA,MAAMC,SAAS,GAAIC,OAAD,IAAa;AAC3B,SAAO;AACHC,IAAAA,IAAI,EAAEH,KAAK,CAACI,SADT;AAEHF,IAAAA;AAFG,GAAP;AAIH,CALD;;AAMA,MAAMG,MAAM,GAAG,MAAM;AACjB,SAAO;AACHF,IAAAA,IAAI,EAAEH,KAAK,CAACM;AADT,GAAP;AAGH,CAJD;;AAMA,OAAO,MAAMC,SAAS,GAAG,MAAM;AAC3B,SAAOF,MAAM,EAAb;AACH,CAFM;AAGP,OAAO,MAAMG,UAAU,GAAG,CAACC,GAAD,EAAMP,OAAN,EAAeQ,KAAf,KAAyB;AAC/C,SAAOC,QAAQ,CAACF,GAAD,EAAMP,OAAN,EAAeQ,KAAf,EAAsBT,SAAtB,CAAf;AACH,CAFM;;AAIP,MAAMU,QAAQ,GAAG,CAACF,GAAD,EAAMP,OAAN,EAAeQ,KAAf,EAAsBE,IAAtB,KAA+B;AAC5C,SAAO,MAAMC,QAAN,IAAmB;AACtB,QAAI;AACJ,YAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACN,GAAD,EAAM;AAC9BO,QAAAA,MAAM,EAAE,MADsB;AAE9BC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAejB,OAAf,CAFwB;AAG9BkB,QAAAA,WAAW,EAAE,aAHiB;AAI9BC,QAAAA,OAAO,EAAE,IAAIC,OAAJ,CAAY;AACjB,0BAAgB;AADC,SAAZ;AAJqB,OAAN,CAA5B;;AASA,UAAG,CAACR,QAAQ,CAACS,EAAb,EAAgB;AACZ,cAAMC,KAAK,CAACV,QAAQ,CAACW,UAAV,CAAX;AACH;;AACD,YAAMC,IAAI,GAAG,MAAMZ,QAAQ,CAACa,IAAT,EAAnB;;AACA,UAAGD,IAAH,EAAQ;AACJ,eAAOA,IAAI,CAACE,GAAZ;AACA,eAAOF,IAAI,CAACG,GAAZ;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAY,aAAYb,IAAI,CAACC,SAAL,CAAeO,IAAf,CAAxB;AACA,YAAIM,MAAM,GAAGC,MAAM,CAACC,IAAP,CAAYR,IAAZ,EAAkBS,GAAlB,CAAuBC,GAAD,IAAS;AACxC,cAAG,CAACA,GAAG,CAACR,GAAL,IAAY,CAACQ,GAAG,CAACP,GAApB,EAAwB;AACtB,mBAAOH,IAAI,CAACU,GAAD,CAAX;AACD;;AACD,iBAAO,IAAP;AACH,SALY,EAKVC,IALU,CAKL,GALK,CAAb;AAMAxB,QAAAA,QAAQ,CAACD,IAAI,CAAC;AAACoB,UAAAA,MAAM,EAAEA,MAAT;AAAiBtB,UAAAA,KAAK,EAAEA;AAAxB,SAAD,CAAL,CAAR;AACH;AACJ,KA1BG,CA0BH,OAAM4B,CAAN,EAAQ;AACTR,MAAAA,OAAO,CAACC,GAAR,CAAY,YAAUO,CAAC,CAACb,UAAxB;AACC;AACA,GA9BD;AAgCH,CAjCD","sourcesContent":["import * as types from './types';\n\nconst isSuccess = (payload) => {\n    return {\n        type: types.ON_RESULT,\n        payload\n    }\n}\nconst onInit = () => {\n    return {\n        type: types.ON_INIT\n    }\n}\n\nexport const initilize = () => {\n    return onInit();\n} \nexport const postFlight = (url, payload, title) => {\n    return postData(url, payload, title, isSuccess);\n}\n\nconst postData = (url, payload, title, done) => {\n    return async(dispatch) => {\n        try {\n        const response = await fetch(url, {\n            method: 'POST',\n            body: JSON.stringify(payload),\n            credentials: 'same-origin',\n            headers: new Headers({\n                'Content-Type': 'application/json'\n            })\n        });\n\n        if(!response.ok){\n            throw Error(response.statusText);\n        }\n        const data = await response.json();\n        if(data){\n            delete data._id;\n            delete data.__v;\n            console.log(\"Result: \"+ JSON.stringify(data));\n            let result = Object.keys(data).map((key) => {\n                if(!key._id || !key.__v){\n                  return data[key];\n                } \n                return true;  \n            }).join(\"-\");\n            dispatch(done({result: result, title: title}));\n        }\n    }catch(e){\n    console.log(\"Error: \"+e.statusText);\n    }\n    }\n\n}\n"]},"metadata":{},"sourceType":"module"}